" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2019 Dec 17
"
" To use it, copy it to
"	       for Unix:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"	 for MS-Windows:  $VIM\_vimrc
"	      for Haiku:  ~/config/settings/vim/vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings, bail
" out.

call plug#begin('~/.vim/plugged')
Plug 'preservim/nerdcommenter'
Plug 'chun-yang/auto-pairs'
Plug 'sirver/ultisnips'
Plug 'pangloss/vim-javascript'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'prettier/vim-prettier', {
  \ 'do': 'npm install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html', 'php'] }
Plug 'mattn/emmet-vim'
Plug 'sainnhe/gruvbox-material'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-markdown'
" Plug 'ashisha/image.vim'
" Plug 'yggdroot/indentline'
" Plug 'nikvdp/ejs-syntax'
" Plug 'briancollins/vim-jst'
" Plug 'itchyny/lightline.vim'
call plug#end()


if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif


" ### Plugin Config ###
"

" -- vim-airline --
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='base16_gruvbox_dark_hard'
let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#left_sep = 'ÓÇ∞'
" let g:airline#extensions#tabline#left_alt_sep = '|'


" -- nerdtree --
nnoremap <leader>n :NERDTreeFocus<CR>
" nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
let NERDTreeDirArrows = 1
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
	\ quit | endif
" Start NERDTree and leave the cursor in it.
" autocmd VimEnter * NERDTree | wincmd p
" let NERDTreeMinimalUI = 1
" let g:NERDTreeDirArrowExpandable = 'ÔÅª '
" let g:NERDTreeDirArrowCollapsible = 'ÔÅº '


" -- gruvbox --
" set background=dark
" set termguicolors
" let g:gruvbox_transparent_bg = 1
" let g:gruvbox_italic = 1
" let g:gruvbox_termcolors = 16
" let g:gruvbox_contrast_dark = 1
" " let g:gruvbox_improved_strings = 1
" let g:gruvbox_improved_warnings = 1
" let g:gruvbox_contrast_dark = 'soft'
" autocmd vimenter * ++nested colorscheme gruvbox


" -- gruvbox-material --
if has('termguicolors')
	set termguicolors
endif
set background=dark
let g:gruvbox_material_background = 'soft'
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_cursor = 'yellow'
let g:gruvbox_material_transparent_background = 1
let g:gruvbox_material_visual = 'reverse'
colorscheme gruvbox-material
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum" " solving termguicolors
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum" " solving termguicolors



" -- nerdcommenter --
filetype plugin on
let g:NERDCreateDefaultMappings = 1 " Create default mappings
let g:NERDSpaceDelims = 1 " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs = 1 " Use compact syntax for prettified multi-line comments
let g:NERDDefaultAlign = 'left' " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDAltDelims_java = 1 " Set a language to use its alternate delimiters by default
let g:NERDCommentEmptyLines = 1 " Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
let g:NERDToggleCheckAllLines = 1 " Enable NERDCommenterToggle to check all selected lines is commented or not 
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 
			\ 'c': { 'left': '/**','right': '*/' }, 
			\ 'ejs': {'left':'<!--', 'right':'--!>'} 
			\ }



" -- vim-javascript --
let g:javascript_plugin_jsdoc = 1
" let g:javascript_plugin_ngdoc = 1
" let g:javascript_conceal_function             = "∆í"
" let g:javascript_conceal_null                 = "√∏"
" let g:javascript_conceal_this                 = "@"
" let g:javascript_conceal_return               = "‚áö"
" let g:javascript_conceal_undefined            = "¬ø"
" let g:javascript_conceal_NaN                  = "‚Ñï"
" let g:javascript_conceal_prototype            = "¬∂"
" let g:javascript_conceal_static               = "‚Ä¢"
" let g:javascript_conceal_super                = "Œ©"
" let g:javascript_conceal_arrow_function       = "‚áí"
" let g:javascript_conceal_noarg_arrow_function = "üûÖ"
" let g:javascript_conceal_underscore_arrow_function = "üûÖ"
" let g:javascript_plugin_flow = 1
" set conceallevel=1
" augroup javascript_folding
"        au!
"     au FileType javascript setlocal foldmethod=syntax
" augroup END



" -- ultisnips --
set runtimepath+=~/.vim/ultisnips_rep
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"


" -- vim-prettier --
au FileType css,scss let b:prettier_exec_cmd = "prettier-stylelint"
let g:prettier#exec_cmd_async = 1


" -- vim-devicons --
let g:DevIconsEnableFoldersOpenClose = 1


" -- indentline --
" let g:indenLine_enabled=1
" let g:indentLine_char_list = ['|', '¬¶', '‚îÜ', '‚îä']
" let g:indentLine_color_term = 239


" -- vim-markdown --
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'javascript']


" ### My config ###
set number
set relativenumber
syntax on
set laststatus=2
set showtabline=2
set tabstop=4
set numberwidth=4
set shiftwidth=4
set t_Co=256
set mouse=a
set pastetoggle=<F3>
filetype on
set nu
set ruler
set encoding=UTF-8
" -- auto wrapping to new line --
set textwidth=0
set wrapmargin=1
set formatoptions+=t
set formatoptions-=l
" -- copy to clipboard system --
vmap <C-c> :w !xclip -selection clipboard<CR>
" -- paksa save jika butuh sudo --
cnoremap w!! w !sudo tee > /dev/null % 
" -- navigasi vim --
nnoremap gh <C-W><C-H>
nnoremap gj <C-W><C-J>
nnoremap gk <C-W><C-K>
nnoremap gl <C-W><C-L>
nnoremap <C-n> :nohlsearch<CR>
nmap <silent> <C-h> :vertical resize -3<CR>
nmap <silent> <C-l> :vertical resize +3<CR>
nmap <silent> <C-k> :res +3<CR>
nmap <silent> <C-j> :res -3<CR>
inoremap <C-j> <Esc>o
inoremap <C-k> <Esc>O
inoremap <C-l> <Esc>la
au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead *.mdx set filetype=markdown
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set omnifunc=javascriptcomplete#CompleteJS

" set list
" vnoremap <C-c> :w !xclip -selection clipboard<CR>
" nmap <silent> <c-k> :wincmd k<CR>
" nmap <silent> <c-j> :wincmd j<CR>
" nmap <silent> <c-h> :wincmd h<CR>
" nmap <silent> <c-l> :wincmd l<CR>
" inoremap <C-h> <Esc>ha
" nmap <silent> <C-[> <C-w><
" nmap <silent> <C-]> <C-w>>
" au BufRead *.png,*.jpg,*.jpeg :call DisplayImage()

